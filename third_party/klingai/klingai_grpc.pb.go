// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: third_party/klingai/klingai.proto

package klingai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageGenerationService_CreateImageTask_FullMethodName = "/klingai.ImageGenerationService/CreateImageTask"
	ImageGenerationService_GetImageTask_FullMethodName    = "/klingai.ImageGenerationService/GetImageTask"
	ImageGenerationService_ListImageTasks_FullMethodName  = "/klingai.ImageGenerationService/ListImageTasks"
)

// ImageGenerationServiceClient is the client API for ImageGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 图像生成服务
type ImageGenerationServiceClient interface {
	// 创建图像生成任务
	CreateImageTask(ctx context.Context, in *CreateImageTaskRequest, opts ...grpc.CallOption) (*CreateImageTaskResponse, error)
	// 查询单个任务
	GetImageTask(ctx context.Context, in *GetImageTaskRequest, opts ...grpc.CallOption) (*GetImageTaskResponse, error)
	// 查询任务列表
	ListImageTasks(ctx context.Context, in *ListImageTasksRequest, opts ...grpc.CallOption) (*ListImageTasksResponse, error)
}

type imageGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageGenerationServiceClient(cc grpc.ClientConnInterface) ImageGenerationServiceClient {
	return &imageGenerationServiceClient{cc}
}

func (c *imageGenerationServiceClient) CreateImageTask(ctx context.Context, in *CreateImageTaskRequest, opts ...grpc.CallOption) (*CreateImageTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateImageTaskResponse)
	err := c.cc.Invoke(ctx, ImageGenerationService_CreateImageTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageGenerationServiceClient) GetImageTask(ctx context.Context, in *GetImageTaskRequest, opts ...grpc.CallOption) (*GetImageTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageTaskResponse)
	err := c.cc.Invoke(ctx, ImageGenerationService_GetImageTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageGenerationServiceClient) ListImageTasks(ctx context.Context, in *ListImageTasksRequest, opts ...grpc.CallOption) (*ListImageTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImageTasksResponse)
	err := c.cc.Invoke(ctx, ImageGenerationService_ListImageTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageGenerationServiceServer is the server API for ImageGenerationService service.
// All implementations should embed UnimplementedImageGenerationServiceServer
// for forward compatibility.
//
// 图像生成服务
type ImageGenerationServiceServer interface {
	// 创建图像生成任务
	CreateImageTask(context.Context, *CreateImageTaskRequest) (*CreateImageTaskResponse, error)
	// 查询单个任务
	GetImageTask(context.Context, *GetImageTaskRequest) (*GetImageTaskResponse, error)
	// 查询任务列表
	ListImageTasks(context.Context, *ListImageTasksRequest) (*ListImageTasksResponse, error)
}

// UnimplementedImageGenerationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageGenerationServiceServer struct{}

func (UnimplementedImageGenerationServiceServer) CreateImageTask(context.Context, *CreateImageTaskRequest) (*CreateImageTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImageTask not implemented")
}
func (UnimplementedImageGenerationServiceServer) GetImageTask(context.Context, *GetImageTaskRequest) (*GetImageTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageTask not implemented")
}
func (UnimplementedImageGenerationServiceServer) ListImageTasks(context.Context, *ListImageTasksRequest) (*ListImageTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImageTasks not implemented")
}
func (UnimplementedImageGenerationServiceServer) testEmbeddedByValue() {}

// UnsafeImageGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageGenerationServiceServer will
// result in compilation errors.
type UnsafeImageGenerationServiceServer interface {
	mustEmbedUnimplementedImageGenerationServiceServer()
}

func RegisterImageGenerationServiceServer(s grpc.ServiceRegistrar, srv ImageGenerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageGenerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageGenerationService_ServiceDesc, srv)
}

func _ImageGenerationService_CreateImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageGenerationServiceServer).CreateImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageGenerationService_CreateImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageGenerationServiceServer).CreateImageTask(ctx, req.(*CreateImageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageGenerationService_GetImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageGenerationServiceServer).GetImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageGenerationService_GetImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageGenerationServiceServer).GetImageTask(ctx, req.(*GetImageTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageGenerationService_ListImageTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImageTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageGenerationServiceServer).ListImageTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageGenerationService_ListImageTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageGenerationServiceServer).ListImageTasks(ctx, req.(*ListImageTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageGenerationService_ServiceDesc is the grpc.ServiceDesc for ImageGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "klingai.ImageGenerationService",
	HandlerType: (*ImageGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImageTask",
			Handler:    _ImageGenerationService_CreateImageTask_Handler,
		},
		{
			MethodName: "GetImageTask",
			Handler:    _ImageGenerationService_GetImageTask_Handler,
		},
		{
			MethodName: "ListImageTasks",
			Handler:    _ImageGenerationService_ListImageTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "third_party/klingai/klingai.proto",
}

const (
	VideoGenerationService_CreateText2VideoTask_FullMethodName = "/klingai.VideoGenerationService/CreateText2VideoTask"
	VideoGenerationService_GetText2VideoTask_FullMethodName    = "/klingai.VideoGenerationService/GetText2VideoTask"
)

// VideoGenerationServiceClient is the client API for VideoGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 视频生成服务
type VideoGenerationServiceClient interface {
	// // 文生视频任务
	CreateText2VideoTask(ctx context.Context, in *CreateText2VideoTaskRequest, opts ...grpc.CallOption) (*CreateText2VideoTaskResponse, error)
	GetText2VideoTask(ctx context.Context, in *GetText2VideoTaskRequest, opts ...grpc.CallOption) (*GetText2VideoTaskResponse, error)
}

type videoGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoGenerationServiceClient(cc grpc.ClientConnInterface) VideoGenerationServiceClient {
	return &videoGenerationServiceClient{cc}
}

func (c *videoGenerationServiceClient) CreateText2VideoTask(ctx context.Context, in *CreateText2VideoTaskRequest, opts ...grpc.CallOption) (*CreateText2VideoTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateText2VideoTaskResponse)
	err := c.cc.Invoke(ctx, VideoGenerationService_CreateText2VideoTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoGenerationServiceClient) GetText2VideoTask(ctx context.Context, in *GetText2VideoTaskRequest, opts ...grpc.CallOption) (*GetText2VideoTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetText2VideoTaskResponse)
	err := c.cc.Invoke(ctx, VideoGenerationService_GetText2VideoTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoGenerationServiceServer is the server API for VideoGenerationService service.
// All implementations should embed UnimplementedVideoGenerationServiceServer
// for forward compatibility.
//
// 视频生成服务
type VideoGenerationServiceServer interface {
	// // 文生视频任务
	CreateText2VideoTask(context.Context, *CreateText2VideoTaskRequest) (*CreateText2VideoTaskResponse, error)
	GetText2VideoTask(context.Context, *GetText2VideoTaskRequest) (*GetText2VideoTaskResponse, error)
}

// UnimplementedVideoGenerationServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoGenerationServiceServer struct{}

func (UnimplementedVideoGenerationServiceServer) CreateText2VideoTask(context.Context, *CreateText2VideoTaskRequest) (*CreateText2VideoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateText2VideoTask not implemented")
}
func (UnimplementedVideoGenerationServiceServer) GetText2VideoTask(context.Context, *GetText2VideoTaskRequest) (*GetText2VideoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText2VideoTask not implemented")
}
func (UnimplementedVideoGenerationServiceServer) testEmbeddedByValue() {}

// UnsafeVideoGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoGenerationServiceServer will
// result in compilation errors.
type UnsafeVideoGenerationServiceServer interface {
	mustEmbedUnimplementedVideoGenerationServiceServer()
}

func RegisterVideoGenerationServiceServer(s grpc.ServiceRegistrar, srv VideoGenerationServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoGenerationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoGenerationService_ServiceDesc, srv)
}

func _VideoGenerationService_CreateText2VideoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateText2VideoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoGenerationServiceServer).CreateText2VideoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoGenerationService_CreateText2VideoTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoGenerationServiceServer).CreateText2VideoTask(ctx, req.(*CreateText2VideoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoGenerationService_GetText2VideoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetText2VideoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoGenerationServiceServer).GetText2VideoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoGenerationService_GetText2VideoTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoGenerationServiceServer).GetText2VideoTask(ctx, req.(*GetText2VideoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoGenerationService_ServiceDesc is the grpc.ServiceDesc for VideoGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "klingai.VideoGenerationService",
	HandlerType: (*VideoGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateText2VideoTask",
			Handler:    _VideoGenerationService_CreateText2VideoTask_Handler,
		},
		{
			MethodName: "GetText2VideoTask",
			Handler:    _VideoGenerationService_GetText2VideoTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "third_party/klingai/klingai.proto",
}

const (
	VirtualTryOnService_CreateTryOnTask_FullMethodName = "/klingai.VirtualTryOnService/CreateTryOnTask"
)

// VirtualTryOnServiceClient is the client API for VirtualTryOnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 虚拟试穿服务
type VirtualTryOnServiceClient interface {
	// // 创建虚拟试穿任务
	CreateTryOnTask(ctx context.Context, in *CreateTryOnTaskRequest, opts ...grpc.CallOption) (*CreateTryOnTaskResponse, error)
}

type virtualTryOnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualTryOnServiceClient(cc grpc.ClientConnInterface) VirtualTryOnServiceClient {
	return &virtualTryOnServiceClient{cc}
}

func (c *virtualTryOnServiceClient) CreateTryOnTask(ctx context.Context, in *CreateTryOnTaskRequest, opts ...grpc.CallOption) (*CreateTryOnTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTryOnTaskResponse)
	err := c.cc.Invoke(ctx, VirtualTryOnService_CreateTryOnTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualTryOnServiceServer is the server API for VirtualTryOnService service.
// All implementations should embed UnimplementedVirtualTryOnServiceServer
// for forward compatibility.
//
// 虚拟试穿服务
type VirtualTryOnServiceServer interface {
	// // 创建虚拟试穿任务
	CreateTryOnTask(context.Context, *CreateTryOnTaskRequest) (*CreateTryOnTaskResponse, error)
}

// UnimplementedVirtualTryOnServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualTryOnServiceServer struct{}

func (UnimplementedVirtualTryOnServiceServer) CreateTryOnTask(context.Context, *CreateTryOnTaskRequest) (*CreateTryOnTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTryOnTask not implemented")
}
func (UnimplementedVirtualTryOnServiceServer) testEmbeddedByValue() {}

// UnsafeVirtualTryOnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualTryOnServiceServer will
// result in compilation errors.
type UnsafeVirtualTryOnServiceServer interface {
	mustEmbedUnimplementedVirtualTryOnServiceServer()
}

func RegisterVirtualTryOnServiceServer(s grpc.ServiceRegistrar, srv VirtualTryOnServiceServer) {
	// If the following call pancis, it indicates UnimplementedVirtualTryOnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualTryOnService_ServiceDesc, srv)
}

func _VirtualTryOnService_CreateTryOnTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTryOnTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualTryOnServiceServer).CreateTryOnTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualTryOnService_CreateTryOnTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualTryOnServiceServer).CreateTryOnTask(ctx, req.(*CreateTryOnTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualTryOnService_ServiceDesc is the grpc.ServiceDesc for VirtualTryOnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualTryOnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "klingai.VirtualTryOnService",
	HandlerType: (*VirtualTryOnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTryOnTask",
			Handler:    _VirtualTryOnService_CreateTryOnTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "third_party/klingai/klingai.proto",
}
