// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: third_party/klingai/klingai.proto

package klingai

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TaskInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskInfoMultiError, or nil
// if none found.
func (m *TaskInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Status

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return TaskInfoMultiError(errors)
	}

	return nil
}

// TaskInfoMultiError is an error wrapping multiple validation errors returned
// by TaskInfo.ValidateAll() if the designated constraints aren't met.
type TaskInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskInfoMultiError) AllErrors() []error { return m }

// TaskInfoValidationError is the validation error returned by
// TaskInfo.Validate if the designated constraints aren't met.
type TaskInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskInfoValidationError) ErrorName() string { return "TaskInfoValidationError" }

// Error satisfies the builtin error interface
func (e TaskInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskInfoValidationError{}

// Validate checks the field values on PaginationRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationRequestMultiError, or nil if none found.
func (m *PaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationRequestMultiError(errors)
	}

	return nil
}

// PaginationRequestMultiError is an error wrapping multiple validation errors
// returned by PaginationRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationRequestMultiError) AllErrors() []error { return m }

// PaginationRequestValidationError is the validation error returned by
// PaginationRequest.Validate if the designated constraints aren't met.
type PaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationRequestValidationError) ErrorName() string {
	return "PaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationRequestValidationError{}

// Validate checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationResponseMultiError, or nil if none found.
func (m *PaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationResponseMultiError(errors)
	}

	return nil
}

// PaginationResponseMultiError is an error wrapping multiple validation errors
// returned by PaginationResponse.ValidateAll() if the designated constraints
// aren't met.
type PaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationResponseMultiError) AllErrors() []error { return m }

// PaginationResponseValidationError is the validation error returned by
// PaginationResponse.Validate if the designated constraints aren't met.
type PaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResponseValidationError) ErrorName() string {
	return "PaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResponseValidationError{}

// Validate checks the field values on BaseTaskRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BaseTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BaseTaskRequestMultiError, or nil if none found.
func (m *BaseTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Prompt

	// no validation rules for NegativePrompt

	if len(errors) > 0 {
		return BaseTaskRequestMultiError(errors)
	}

	return nil
}

// BaseTaskRequestMultiError is an error wrapping multiple validation errors
// returned by BaseTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type BaseTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseTaskRequestMultiError) AllErrors() []error { return m }

// BaseTaskRequestValidationError is the validation error returned by
// BaseTaskRequest.Validate if the designated constraints aren't met.
type BaseTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseTaskRequestValidationError) ErrorName() string { return "BaseTaskRequestValidationError" }

// Error satisfies the builtin error interface
func (e BaseTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseTaskRequestValidationError{}

// Validate checks the field values on CreateImageTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImageTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImageTaskRequestMultiError, or nil if none found.
func (m *CreateImageTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Model

	if l := utf8.RuneCountInString(m.GetPrompt()); l < 1 || l > 500 {
		err := CreateImageTaskRequestValidationError{
			field:  "Prompt",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNegativePrompt()) > 200 {
		err := CreateImageTaskRequestValidationError{
			field:  "NegativePrompt",
			reason: "value length must be at most 200 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Image

	if val := m.GetImageFidelity(); val < 0 || val > 1 {
		err := CreateImageTaskRequestValidationError{
			field:  "ImageFidelity",
			reason: "value must be inside range [0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetN(); val < 1 || val > 9 {
		err := CreateImageTaskRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 9]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AspectRatio

	// no validation rules for CallbackUrl

	if len(errors) > 0 {
		return CreateImageTaskRequestMultiError(errors)
	}

	return nil
}

// CreateImageTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateImageTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateImageTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageTaskRequestMultiError) AllErrors() []error { return m }

// CreateImageTaskRequestValidationError is the validation error returned by
// CreateImageTaskRequest.Validate if the designated constraints aren't met.
type CreateImageTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageTaskRequestValidationError) ErrorName() string {
	return "CreateImageTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImageTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageTaskRequestValidationError{}

// Validate checks the field values on CreateImageTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateImageTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateImageTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateImageTaskResponseMultiError, or nil if none found.
func (m *CreateImageTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateImageTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateImageTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateImageTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateImageTaskResponseValidationError{
				field:  "TaskInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateImageTaskResponseMultiError(errors)
	}

	return nil
}

// CreateImageTaskResponseMultiError is an error wrapping multiple validation
// errors returned by CreateImageTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateImageTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateImageTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateImageTaskResponseMultiError) AllErrors() []error { return m }

// CreateImageTaskResponseValidationError is the validation error returned by
// CreateImageTaskResponse.Validate if the designated constraints aren't met.
type CreateImageTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateImageTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateImageTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateImageTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateImageTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateImageTaskResponseValidationError) ErrorName() string {
	return "CreateImageTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateImageTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateImageTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateImageTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateImageTaskResponseValidationError{}

// Validate checks the field values on GetImageTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageTaskRequestMultiError, or nil if none found.
func (m *GetImageTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetImageTaskRequestMultiError(errors)
	}

	return nil
}

// GetImageTaskRequestMultiError is an error wrapping multiple validation
// errors returned by GetImageTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type GetImageTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageTaskRequestMultiError) AllErrors() []error { return m }

// GetImageTaskRequestValidationError is the validation error returned by
// GetImageTaskRequest.Validate if the designated constraints aren't met.
type GetImageTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageTaskRequestValidationError) ErrorName() string {
	return "GetImageTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageTaskRequestValidationError{}

// Validate checks the field values on GetImageTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetImageTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetImageTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetImageTaskResponseMultiError, or nil if none found.
func (m *GetImageTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetImageTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetImageTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetImageTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetImageTaskResponseValidationError{
				field:  "TaskInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetImageTaskResponseMultiError(errors)
	}

	return nil
}

// GetImageTaskResponseMultiError is an error wrapping multiple validation
// errors returned by GetImageTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type GetImageTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetImageTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetImageTaskResponseMultiError) AllErrors() []error { return m }

// GetImageTaskResponseValidationError is the validation error returned by
// GetImageTaskResponse.Validate if the designated constraints aren't met.
type GetImageTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetImageTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetImageTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetImageTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetImageTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetImageTaskResponseValidationError) ErrorName() string {
	return "GetImageTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetImageTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetImageTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetImageTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetImageTaskResponseValidationError{}

// Validate checks the field values on ListImageTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImageTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImageTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImageTasksRequestMultiError, or nil if none found.
func (m *ListImageTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImageTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImageTasksRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImageTasksRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImageTasksRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListImageTasksRequestMultiError(errors)
	}

	return nil
}

// ListImageTasksRequestMultiError is an error wrapping multiple validation
// errors returned by ListImageTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListImageTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImageTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImageTasksRequestMultiError) AllErrors() []error { return m }

// ListImageTasksRequestValidationError is the validation error returned by
// ListImageTasksRequest.Validate if the designated constraints aren't met.
type ListImageTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImageTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImageTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImageTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImageTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImageTasksRequestValidationError) ErrorName() string {
	return "ListImageTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImageTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImageTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImageTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImageTasksRequestValidationError{}

// Validate checks the field values on ListImageTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImageTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImageTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImageTasksResponseMultiError, or nil if none found.
func (m *ListImageTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImageTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImageTasksResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImageTasksResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImageTasksResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListImageTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListImageTasksResponseValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListImageTasksResponseValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListImageTasksResponseMultiError(errors)
	}

	return nil
}

// ListImageTasksResponseMultiError is an error wrapping multiple validation
// errors returned by ListImageTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListImageTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImageTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImageTasksResponseMultiError) AllErrors() []error { return m }

// ListImageTasksResponseValidationError is the validation error returned by
// ListImageTasksResponse.Validate if the designated constraints aren't met.
type ListImageTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImageTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImageTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImageTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImageTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImageTasksResponseValidationError) ErrorName() string {
	return "ListImageTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImageTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImageTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImageTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImageTasksResponseValidationError{}

// Validate checks the field values on CreateText2VideoTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateText2VideoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateText2VideoTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateText2VideoTaskRequestMultiError, or nil if none found.
func (m *CreateText2VideoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateText2VideoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	if l := utf8.RuneCountInString(m.GetPrompt()); l < 1 || l > 2500 {
		err := CreateText2VideoTaskRequestValidationError{
			field:  "Prompt",
			reason: "value length must be between 1 and 2500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNegativePrompt()) > 2500 {
		err := CreateText2VideoTaskRequestValidationError{
			field:  "NegativePrompt",
			reason: "value length must be at most 2500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetCfgScale(); val < 0 || val > 1 {
		err := CreateText2VideoTaskRequestValidationError{
			field:  "CfgScale",
			reason: "value must be inside range [0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Mode

	if all {
		switch v := interface{}(m.GetCameraControl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateText2VideoTaskRequestValidationError{
					field:  "CameraControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateText2VideoTaskRequestValidationError{
					field:  "CameraControl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCameraControl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateText2VideoTaskRequestValidationError{
				field:  "CameraControl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AspectRatio

	if _, ok := _CreateText2VideoTaskRequest_Duration_InLookup[m.GetDuration()]; !ok {
		err := CreateText2VideoTaskRequestValidationError{
			field:  "Duration",
			reason: "value must be in list [5 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CallbackUrl

	// no validation rules for ExternalTaskId

	if len(errors) > 0 {
		return CreateText2VideoTaskRequestMultiError(errors)
	}

	return nil
}

// CreateText2VideoTaskRequestMultiError is an error wrapping multiple
// validation errors returned by CreateText2VideoTaskRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateText2VideoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateText2VideoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateText2VideoTaskRequestMultiError) AllErrors() []error { return m }

// CreateText2VideoTaskRequestValidationError is the validation error returned
// by CreateText2VideoTaskRequest.Validate if the designated constraints
// aren't met.
type CreateText2VideoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateText2VideoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateText2VideoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateText2VideoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateText2VideoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateText2VideoTaskRequestValidationError) ErrorName() string {
	return "CreateText2VideoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateText2VideoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateText2VideoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateText2VideoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateText2VideoTaskRequestValidationError{}

var _CreateText2VideoTaskRequest_Duration_InLookup = map[int32]struct{}{
	5:  {},
	10: {},
}

// Validate checks the field values on CameraConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CameraConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CameraConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CameraConfigMultiError, or
// nil if none found.
func (m *CameraConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CameraConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetHorizontal(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Horizontal",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetVertical(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Vertical",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPan(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Pan",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTilt(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Tilt",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetRoll(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Roll",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetZoom(); val < -10 || val > 10 {
		err := CameraConfigValidationError{
			field:  "Zoom",
			reason: "value must be inside range [-10, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CameraConfigMultiError(errors)
	}

	return nil
}

// CameraConfigMultiError is an error wrapping multiple validation errors
// returned by CameraConfig.ValidateAll() if the designated constraints aren't met.
type CameraConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CameraConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CameraConfigMultiError) AllErrors() []error { return m }

// CameraConfigValidationError is the validation error returned by
// CameraConfig.Validate if the designated constraints aren't met.
type CameraConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraConfigValidationError) ErrorName() string { return "CameraConfigValidationError" }

// Error satisfies the builtin error interface
func (e CameraConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraConfigValidationError{}

// Validate checks the field values on CameraControl with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CameraControl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CameraControl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CameraControlMultiError, or
// nil if none found.
func (m *CameraControl) ValidateAll() error {
	return m.validate(true)
}

func (m *CameraControl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CameraControlValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CameraControlValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CameraControlValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CameraControlMultiError(errors)
	}

	return nil
}

// CameraControlMultiError is an error wrapping multiple validation errors
// returned by CameraControl.ValidateAll() if the designated constraints
// aren't met.
type CameraControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CameraControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CameraControlMultiError) AllErrors() []error { return m }

// CameraControlValidationError is the validation error returned by
// CameraControl.Validate if the designated constraints aren't met.
type CameraControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CameraControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CameraControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CameraControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CameraControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CameraControlValidationError) ErrorName() string { return "CameraControlValidationError" }

// Error satisfies the builtin error interface
func (e CameraControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCameraControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CameraControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CameraControlValidationError{}

// Validate checks the field values on CreateText2VideoTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateText2VideoTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateText2VideoTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateText2VideoTaskResponseMultiError, or nil if none found.
func (m *CreateText2VideoTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateText2VideoTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for ExternalTaskId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateText2VideoTaskResponseMultiError(errors)
	}

	return nil
}

// CreateText2VideoTaskResponseMultiError is an error wrapping multiple
// validation errors returned by CreateText2VideoTaskResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateText2VideoTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateText2VideoTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateText2VideoTaskResponseMultiError) AllErrors() []error { return m }

// CreateText2VideoTaskResponseValidationError is the validation error returned
// by CreateText2VideoTaskResponse.Validate if the designated constraints
// aren't met.
type CreateText2VideoTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateText2VideoTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateText2VideoTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateText2VideoTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateText2VideoTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateText2VideoTaskResponseValidationError) ErrorName() string {
	return "CreateText2VideoTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateText2VideoTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateText2VideoTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateText2VideoTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateText2VideoTaskResponseValidationError{}

// Validate checks the field values on GetText2VideoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetText2VideoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetText2VideoTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetText2VideoTaskRequestMultiError, or nil if none found.
func (m *GetText2VideoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetText2VideoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for ExternalTaskId

	if len(errors) > 0 {
		return GetText2VideoTaskRequestMultiError(errors)
	}

	return nil
}

// GetText2VideoTaskRequestMultiError is an error wrapping multiple validation
// errors returned by GetText2VideoTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type GetText2VideoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetText2VideoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetText2VideoTaskRequestMultiError) AllErrors() []error { return m }

// GetText2VideoTaskRequestValidationError is the validation error returned by
// GetText2VideoTaskRequest.Validate if the designated constraints aren't met.
type GetText2VideoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetText2VideoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetText2VideoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetText2VideoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetText2VideoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetText2VideoTaskRequestValidationError) ErrorName() string {
	return "GetText2VideoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetText2VideoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetText2VideoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetText2VideoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetText2VideoTaskRequestValidationError{}

// Validate checks the field values on GetText2VideoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetText2VideoTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetText2VideoTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetText2VideoTaskResponseMultiError, or nil if none found.
func (m *GetText2VideoTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetText2VideoTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for TaskStatus

	// no validation rules for TaskStatusMsg

	if all {
		switch v := interface{}(m.GetTaskInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetText2VideoTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetText2VideoTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetText2VideoTaskResponseValidationError{
				field:  "TaskInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetText2VideoTaskResponseValidationError{
					field:  "TaskResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetText2VideoTaskResponseValidationError{
					field:  "TaskResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetText2VideoTaskResponseValidationError{
				field:  "TaskResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetText2VideoTaskResponseMultiError(errors)
	}

	return nil
}

// GetText2VideoTaskResponseMultiError is an error wrapping multiple validation
// errors returned by GetText2VideoTaskResponse.ValidateAll() if the
// designated constraints aren't met.
type GetText2VideoTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetText2VideoTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetText2VideoTaskResponseMultiError) AllErrors() []error { return m }

// GetText2VideoTaskResponseValidationError is the validation error returned by
// GetText2VideoTaskResponse.Validate if the designated constraints aren't met.
type GetText2VideoTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetText2VideoTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetText2VideoTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetText2VideoTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetText2VideoTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetText2VideoTaskResponseValidationError) ErrorName() string {
	return "GetText2VideoTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetText2VideoTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetText2VideoTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetText2VideoTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetText2VideoTaskResponseValidationError{}

// Validate checks the field values on VideoInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoInfoMultiError, or nil
// if none found.
func (m *VideoInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for Duration

	if len(errors) > 0 {
		return VideoInfoMultiError(errors)
	}

	return nil
}

// VideoInfoMultiError is an error wrapping multiple validation errors returned
// by VideoInfo.ValidateAll() if the designated constraints aren't met.
type VideoInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoInfoMultiError) AllErrors() []error { return m }

// VideoInfoValidationError is the validation error returned by
// VideoInfo.Validate if the designated constraints aren't met.
type VideoInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoInfoValidationError) ErrorName() string { return "VideoInfoValidationError" }

// Error satisfies the builtin error interface
func (e VideoInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoInfoValidationError{}

// Validate checks the field values on TaskResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskResultMultiError, or
// nil if none found.
func (m *TaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskResultValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskResultValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskResultValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskResultMultiError(errors)
	}

	return nil
}

// TaskResultMultiError is an error wrapping multiple validation errors
// returned by TaskResult.ValidateAll() if the designated constraints aren't met.
type TaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskResultMultiError) AllErrors() []error { return m }

// TaskResultValidationError is the validation error returned by
// TaskResult.Validate if the designated constraints aren't met.
type TaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskResultValidationError) ErrorName() string { return "TaskResultValidationError" }

// Error satisfies the builtin error interface
func (e TaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskResultValidationError{}

// Validate checks the field values on CreateTryOnTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTryOnTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTryOnTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTryOnTaskRequestMultiError, or nil if none found.
func (m *CreateTryOnTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTryOnTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelName

	// no validation rules for HumanImage

	// no validation rules for ClothImage

	// no validation rules for CallbackUrl

	if len(errors) > 0 {
		return CreateTryOnTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTryOnTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTryOnTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTryOnTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTryOnTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTryOnTaskRequestMultiError) AllErrors() []error { return m }

// CreateTryOnTaskRequestValidationError is the validation error returned by
// CreateTryOnTaskRequest.Validate if the designated constraints aren't met.
type CreateTryOnTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTryOnTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTryOnTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTryOnTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTryOnTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTryOnTaskRequestValidationError) ErrorName() string {
	return "CreateTryOnTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTryOnTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTryOnTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTryOnTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTryOnTaskRequestValidationError{}

// Validate checks the field values on CreateTryOnTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTryOnTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTryOnTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTryOnTaskResponseMultiError, or nil if none found.
func (m *CreateTryOnTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTryOnTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTryOnTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTryOnTaskResponseValidationError{
					field:  "TaskInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTryOnTaskResponseValidationError{
				field:  "TaskInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTryOnTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTryOnTaskResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTryOnTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTryOnTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTryOnTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTryOnTaskResponseMultiError) AllErrors() []error { return m }

// CreateTryOnTaskResponseValidationError is the validation error returned by
// CreateTryOnTaskResponse.Validate if the designated constraints aren't met.
type CreateTryOnTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTryOnTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTryOnTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTryOnTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTryOnTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTryOnTaskResponseValidationError) ErrorName() string {
	return "CreateTryOnTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTryOnTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTryOnTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTryOnTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTryOnTaskResponseValidationError{}
