// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: third_party/klingai/klingai.proto

package klingai

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationImageGenerationServiceCreateImageTask = "/klingai.ImageGenerationService/CreateImageTask"
const OperationImageGenerationServiceGetImageTask = "/klingai.ImageGenerationService/GetImageTask"
const OperationImageGenerationServiceListImageTasks = "/klingai.ImageGenerationService/ListImageTasks"

type ImageGenerationServiceHTTPServer interface {
	// CreateImageTask 创建图像生成任务
	CreateImageTask(context.Context, *CreateImageTaskRequest) (*CreateImageTaskResponse, error)
	// GetImageTask 查询单个任务
	GetImageTask(context.Context, *GetImageTaskRequest) (*GetImageTaskResponse, error)
	// ListImageTasks 查询任务列表
	ListImageTasks(context.Context, *ListImageTasksRequest) (*ListImageTasksResponse, error)
}

func RegisterImageGenerationServiceHTTPServer(s *http.Server, srv ImageGenerationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/images/generations", _ImageGenerationService_CreateImageTask0_HTTP_Handler(srv))
	r.GET("/v1/images/generations/{task_id}", _ImageGenerationService_GetImageTask0_HTTP_Handler(srv))
	r.GET("/v1/images/generations", _ImageGenerationService_ListImageTasks0_HTTP_Handler(srv))
}

func _ImageGenerationService_CreateImageTask0_HTTP_Handler(srv ImageGenerationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateImageTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageGenerationServiceCreateImageTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateImageTask(ctx, req.(*CreateImageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateImageTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _ImageGenerationService_GetImageTask0_HTTP_Handler(srv ImageGenerationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetImageTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageGenerationServiceGetImageTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetImageTask(ctx, req.(*GetImageTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetImageTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _ImageGenerationService_ListImageTasks0_HTTP_Handler(srv ImageGenerationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListImageTasksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageGenerationServiceListImageTasks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListImageTasks(ctx, req.(*ListImageTasksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListImageTasksResponse)
		return ctx.Result(200, reply)
	}
}

type ImageGenerationServiceHTTPClient interface {
	CreateImageTask(ctx context.Context, req *CreateImageTaskRequest, opts ...http.CallOption) (rsp *CreateImageTaskResponse, err error)
	GetImageTask(ctx context.Context, req *GetImageTaskRequest, opts ...http.CallOption) (rsp *GetImageTaskResponse, err error)
	ListImageTasks(ctx context.Context, req *ListImageTasksRequest, opts ...http.CallOption) (rsp *ListImageTasksResponse, err error)
}

type ImageGenerationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewImageGenerationServiceHTTPClient(client *http.Client) ImageGenerationServiceHTTPClient {
	return &ImageGenerationServiceHTTPClientImpl{client}
}

func (c *ImageGenerationServiceHTTPClientImpl) CreateImageTask(ctx context.Context, in *CreateImageTaskRequest, opts ...http.CallOption) (*CreateImageTaskResponse, error) {
	var out CreateImageTaskResponse
	pattern := "/v1/images/generations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationImageGenerationServiceCreateImageTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageGenerationServiceHTTPClientImpl) GetImageTask(ctx context.Context, in *GetImageTaskRequest, opts ...http.CallOption) (*GetImageTaskResponse, error) {
	var out GetImageTaskResponse
	pattern := "/v1/images/generations/{task_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImageGenerationServiceGetImageTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageGenerationServiceHTTPClientImpl) ListImageTasks(ctx context.Context, in *ListImageTasksRequest, opts ...http.CallOption) (*ListImageTasksResponse, error) {
	var out ListImageTasksResponse
	pattern := "/v1/images/generations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImageGenerationServiceListImageTasks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationVideoGenerationServiceCreateText2VideoTask = "/klingai.VideoGenerationService/CreateText2VideoTask"
const OperationVideoGenerationServiceGetText2VideoTask = "/klingai.VideoGenerationService/GetText2VideoTask"

type VideoGenerationServiceHTTPServer interface {
	// CreateText2VideoTask   // 文生视频任务
	CreateText2VideoTask(context.Context, *CreateText2VideoTaskRequest) (*CreateText2VideoTaskResponse, error)
	GetText2VideoTask(context.Context, *GetText2VideoTaskRequest) (*GetText2VideoTaskResponse, error)
}

func RegisterVideoGenerationServiceHTTPServer(s *http.Server, srv VideoGenerationServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/videos/generations", _VideoGenerationService_CreateText2VideoTask0_HTTP_Handler(srv))
	r.GET("/v1/videos/text2video/{task_id}", _VideoGenerationService_GetText2VideoTask0_HTTP_Handler(srv))
}

func _VideoGenerationService_CreateText2VideoTask0_HTTP_Handler(srv VideoGenerationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateText2VideoTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoGenerationServiceCreateText2VideoTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateText2VideoTask(ctx, req.(*CreateText2VideoTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateText2VideoTaskResponse)
		return ctx.Result(200, reply)
	}
}

func _VideoGenerationService_GetText2VideoTask0_HTTP_Handler(srv VideoGenerationServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetText2VideoTaskRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVideoGenerationServiceGetText2VideoTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetText2VideoTask(ctx, req.(*GetText2VideoTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetText2VideoTaskResponse)
		return ctx.Result(200, reply)
	}
}

type VideoGenerationServiceHTTPClient interface {
	CreateText2VideoTask(ctx context.Context, req *CreateText2VideoTaskRequest, opts ...http.CallOption) (rsp *CreateText2VideoTaskResponse, err error)
	GetText2VideoTask(ctx context.Context, req *GetText2VideoTaskRequest, opts ...http.CallOption) (rsp *GetText2VideoTaskResponse, err error)
}

type VideoGenerationServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVideoGenerationServiceHTTPClient(client *http.Client) VideoGenerationServiceHTTPClient {
	return &VideoGenerationServiceHTTPClientImpl{client}
}

func (c *VideoGenerationServiceHTTPClientImpl) CreateText2VideoTask(ctx context.Context, in *CreateText2VideoTaskRequest, opts ...http.CallOption) (*CreateText2VideoTaskResponse, error) {
	var out CreateText2VideoTaskResponse
	pattern := "/v1/videos/generations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVideoGenerationServiceCreateText2VideoTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *VideoGenerationServiceHTTPClientImpl) GetText2VideoTask(ctx context.Context, in *GetText2VideoTaskRequest, opts ...http.CallOption) (*GetText2VideoTaskResponse, error) {
	var out GetText2VideoTaskResponse
	pattern := "/v1/videos/text2video/{task_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVideoGenerationServiceGetText2VideoTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

const OperationVirtualTryOnServiceCreateTryOnTask = "/klingai.VirtualTryOnService/CreateTryOnTask"

type VirtualTryOnServiceHTTPServer interface {
	// CreateTryOnTask   // 创建虚拟试穿任务
	CreateTryOnTask(context.Context, *CreateTryOnTaskRequest) (*CreateTryOnTaskResponse, error)
}

func RegisterVirtualTryOnServiceHTTPServer(s *http.Server, srv VirtualTryOnServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/images/kolors-virtual-try-on", _VirtualTryOnService_CreateTryOnTask0_HTTP_Handler(srv))
}

func _VirtualTryOnService_CreateTryOnTask0_HTTP_Handler(srv VirtualTryOnServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTryOnTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVirtualTryOnServiceCreateTryOnTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTryOnTask(ctx, req.(*CreateTryOnTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTryOnTaskResponse)
		return ctx.Result(200, reply)
	}
}

type VirtualTryOnServiceHTTPClient interface {
	CreateTryOnTask(ctx context.Context, req *CreateTryOnTaskRequest, opts ...http.CallOption) (rsp *CreateTryOnTaskResponse, err error)
}

type VirtualTryOnServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVirtualTryOnServiceHTTPClient(client *http.Client) VirtualTryOnServiceHTTPClient {
	return &VirtualTryOnServiceHTTPClientImpl{client}
}

func (c *VirtualTryOnServiceHTTPClientImpl) CreateTryOnTask(ctx context.Context, in *CreateTryOnTaskRequest, opts ...http.CallOption) (*CreateTryOnTaskResponse, error) {
	var out CreateTryOnTaskResponse
	pattern := "/v1/images/kolors-virtual-try-on"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationVirtualTryOnServiceCreateTryOnTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
