// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: third_party/klingai/klingai.proto

package klingai

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 任务状态枚举
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0
	TaskStatus_TASK_STATUS_PENDING     TaskStatus = 1 // 等待中
	TaskStatus_TASK_STATUS_PROCESSING  TaskStatus = 2 // 处理中
	TaskStatus_TASK_STATUS_COMPLETED   TaskStatus = 3 // 已完成
	TaskStatus_TASK_STATUS_FAILED      TaskStatus = 4 // 失败
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_PENDING",
		2: "TASK_STATUS_PROCESSING",
		3: "TASK_STATUS_COMPLETED",
		4: "TASK_STATUS_FAILED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_PENDING":     1,
		"TASK_STATUS_PROCESSING":  2,
		"TASK_STATUS_COMPLETED":   3,
		"TASK_STATUS_FAILED":      4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_klingai_klingai_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_third_party_klingai_klingai_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{0}
}

// 模型类型枚举
type ModelType int32

const (
	ModelType_MODEL_TYPE_UNSPECIFIED ModelType = 0
	ModelType_MODEL_TYPE_KLING_V1    ModelType = 1 // kling-v1
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "MODEL_TYPE_UNSPECIFIED",
		1: "MODEL_TYPE_KLING_V1",
	}
	ModelType_value = map[string]int32{
		"MODEL_TYPE_UNSPECIFIED": 0,
		"MODEL_TYPE_KLING_V1":    1,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_klingai_klingai_proto_enumTypes[1].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_third_party_klingai_klingai_proto_enumTypes[1]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{1}
}

// 画面纵横比枚举
type AspectRatio int32

const (
	AspectRatio_ASPECT_RATIO_UNSPECIFIED AspectRatio = 0
	AspectRatio_ASPECT_RATIO_16_9        AspectRatio = 1 // 16:9
	AspectRatio_ASPECT_RATIO_9_16        AspectRatio = 2 // 9:16
	AspectRatio_ASPECT_RATIO_1_1         AspectRatio = 3 // 1:1
	AspectRatio_ASPECT_RATIO_4_3         AspectRatio = 4 // 4:3
	AspectRatio_ASPECT_RATIO_3_4         AspectRatio = 5 // 3:4
	AspectRatio_ASPECT_RATIO_3_2         AspectRatio = 6 // 3:2
	AspectRatio_ASPECT_RATIO_2_3         AspectRatio = 7 // 2:3
)

// Enum value maps for AspectRatio.
var (
	AspectRatio_name = map[int32]string{
		0: "ASPECT_RATIO_UNSPECIFIED",
		1: "ASPECT_RATIO_16_9",
		2: "ASPECT_RATIO_9_16",
		3: "ASPECT_RATIO_1_1",
		4: "ASPECT_RATIO_4_3",
		5: "ASPECT_RATIO_3_4",
		6: "ASPECT_RATIO_3_2",
		7: "ASPECT_RATIO_2_3",
	}
	AspectRatio_value = map[string]int32{
		"ASPECT_RATIO_UNSPECIFIED": 0,
		"ASPECT_RATIO_16_9":        1,
		"ASPECT_RATIO_9_16":        2,
		"ASPECT_RATIO_1_1":         3,
		"ASPECT_RATIO_4_3":         4,
		"ASPECT_RATIO_3_4":         5,
		"ASPECT_RATIO_3_2":         6,
		"ASPECT_RATIO_2_3":         7,
	}
)

func (x AspectRatio) Enum() *AspectRatio {
	p := new(AspectRatio)
	*p = x
	return p
}

func (x AspectRatio) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AspectRatio) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_klingai_klingai_proto_enumTypes[2].Descriptor()
}

func (AspectRatio) Type() protoreflect.EnumType {
	return &file_third_party_klingai_klingai_proto_enumTypes[2]
}

func (x AspectRatio) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AspectRatio.Descriptor instead.
func (AspectRatio) EnumDescriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{2}
}

// 生成模式枚举
type GenerationMode int32

const (
	GenerationMode_MODE_UNSPECIFIED GenerationMode = 0
	GenerationMode_MODE_STD         GenerationMode = 1 // 标准模式
	GenerationMode_MODE_PRO         GenerationMode = 2 // 专家模式
)

// Enum value maps for GenerationMode.
var (
	GenerationMode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_STD",
		2: "MODE_PRO",
	}
	GenerationMode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_STD":         1,
		"MODE_PRO":         2,
	}
)

func (x GenerationMode) Enum() *GenerationMode {
	p := new(GenerationMode)
	*p = x
	return p
}

func (x GenerationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_klingai_klingai_proto_enumTypes[3].Descriptor()
}

func (GenerationMode) Type() protoreflect.EnumType {
	return &file_third_party_klingai_klingai_proto_enumTypes[3]
}

func (x GenerationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationMode.Descriptor instead.
func (GenerationMode) EnumDescriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{3}
}

// 运镜类型枚举
type CameraType int32

const (
	CameraType_CAMERA_TYPE_UNSPECIFIED        CameraType = 0
	CameraType_simple                         CameraType = 1 // 简单运镜
	CameraType_down_back                      CameraType = 2 // 下移拉远
	CameraType_CAMERA_TYPE_FORWARD_UP         CameraType = 3 // 推进上移
	CameraType_CAMERA_TYPE_RIGHT_TURN_FORWARD CameraType = 4 // 右旋推进
	CameraType_CAMERA_TYPE_LEFT_TURN_FORWARD  CameraType = 5 // 左旋推进
)

// Enum value maps for CameraType.
var (
	CameraType_name = map[int32]string{
		0: "CAMERA_TYPE_UNSPECIFIED",
		1: "simple",
		2: "down_back",
		3: "CAMERA_TYPE_FORWARD_UP",
		4: "CAMERA_TYPE_RIGHT_TURN_FORWARD",
		5: "CAMERA_TYPE_LEFT_TURN_FORWARD",
	}
	CameraType_value = map[string]int32{
		"CAMERA_TYPE_UNSPECIFIED":        0,
		"simple":                         1,
		"down_back":                      2,
		"CAMERA_TYPE_FORWARD_UP":         3,
		"CAMERA_TYPE_RIGHT_TURN_FORWARD": 4,
		"CAMERA_TYPE_LEFT_TURN_FORWARD":  5,
	}
)

func (x CameraType) Enum() *CameraType {
	p := new(CameraType)
	*p = x
	return p
}

func (x CameraType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraType) Descriptor() protoreflect.EnumDescriptor {
	return file_third_party_klingai_klingai_proto_enumTypes[4].Descriptor()
}

func (CameraType) Type() protoreflect.EnumType {
	return &file_third_party_klingai_klingai_proto_enumTypes[4]
}

func (x CameraType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraType.Descriptor instead.
func (CameraType) EnumDescriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{4}
}

// 通用任务信息
type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId       string     `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                   // 任务ID
	Status       TaskStatus `protobuf:"varint,2,opt,name=status,proto3,enum=klingai.TaskStatus" json:"status,omitempty"`        // 任务状态
	CreateTime   string     `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`       // 创建时间
	UpdateTime   string     `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       // 更新时间
	ErrorMessage string     `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息(如果有)
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{0}
}

func (x *TaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskInfo) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *TaskInfo) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskInfo) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *TaskInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 分页请求
type PaginationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页大小
}

func (x *PaginationRequest) Reset() {
	*x = PaginationRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationRequest) ProtoMessage() {}

func (x *PaginationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationRequest.ProtoReflect.Descriptor instead.
func (*PaginationRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{1}
}

func (x *PaginationRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页响应
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page     int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页大小
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{2}
}

func (x *PaginationResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 创建任务的基础请求参数
type BaseTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt         string `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`                                       // 正向提示词
	NegativePrompt string `protobuf:"bytes,2,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"` // 负向提示词(可选)
}

func (x *BaseTaskRequest) Reset() {
	*x = BaseTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseTaskRequest) ProtoMessage() {}

func (x *BaseTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseTaskRequest.ProtoReflect.Descriptor instead.
func (*BaseTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{3}
}

func (x *BaseTaskRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *BaseTaskRequest) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

// 创建图像任务请求
type CreateImageTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model          string      `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`                                                          // 模型名称，可选，默认kling-v1
	Prompt         string      `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`                                                        // 正向文本提示词，必须
	NegativePrompt string      `protobuf:"bytes,3,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"`                  // 负向文本提示词，可选
	Image          string      `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`                                                          // 参考图片(Base64或URL)，可选
	ImageFidelity  float32     `protobuf:"fixed32,5,opt,name=image_fidelity,json=imageFidelity,proto3" json:"image_fidelity,omitempty"`                   // 图片参考强度，可选，默认0.5
	N              int32       `protobuf:"varint,6,opt,name=n,proto3" json:"n,omitempty"`                                                                 // 生成图片数量，可选，默认1
	AspectRatio    AspectRatio `protobuf:"varint,7,opt,name=aspect_ratio,json=aspectRatio,proto3,enum=klingai.AspectRatio" json:"aspect_ratio,omitempty"` // 画面纵横比，可选，默认16:9
	CallbackUrl    string      `protobuf:"bytes,8,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`                           // 回调通知地址，可选
}

func (x *CreateImageTaskRequest) Reset() {
	*x = CreateImageTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImageTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageTaskRequest) ProtoMessage() {}

func (x *CreateImageTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateImageTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{4}
}

func (x *CreateImageTaskRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateImageTaskRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *CreateImageTaskRequest) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *CreateImageTaskRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateImageTaskRequest) GetImageFidelity() float32 {
	if x != nil {
		return x.ImageFidelity
	}
	return 0
}

func (x *CreateImageTaskRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CreateImageTaskRequest) GetAspectRatio() AspectRatio {
	if x != nil {
		return x.AspectRatio
	}
	return AspectRatio_ASPECT_RATIO_UNSPECIFIED
}

func (x *CreateImageTaskRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

// 创建图像任务响应
type CreateImageTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *TaskInfo `protobuf:"bytes,1,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *CreateImageTaskResponse) Reset() {
	*x = CreateImageTaskResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateImageTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageTaskResponse) ProtoMessage() {}

func (x *CreateImageTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateImageTaskResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{5}
}

func (x *CreateImageTaskResponse) GetTaskInfo() *TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

// 查询单个任务请求
type GetImageTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetImageTaskRequest) Reset() {
	*x = GetImageTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageTaskRequest) ProtoMessage() {}

func (x *GetImageTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageTaskRequest.ProtoReflect.Descriptor instead.
func (*GetImageTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{6}
}

func (x *GetImageTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 查询单个任务响应
type GetImageTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo  *TaskInfo `protobuf:"bytes,1,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
	ImageUrls []string  `protobuf:"bytes,2,rep,name=image_urls,json=imageUrls,proto3" json:"image_urls,omitempty"` // 生成的图片URL列表
}

func (x *GetImageTaskResponse) Reset() {
	*x = GetImageTaskResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageTaskResponse) ProtoMessage() {}

func (x *GetImageTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageTaskResponse.ProtoReflect.Descriptor instead.
func (*GetImageTaskResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{7}
}

func (x *GetImageTaskResponse) GetTaskInfo() *TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *GetImageTaskResponse) GetImageUrls() []string {
	if x != nil {
		return x.ImageUrls
	}
	return nil
}

// 查询任务列表请求
type ListImageTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListImageTasksRequest) Reset() {
	*x = ListImageTasksRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImageTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageTasksRequest) ProtoMessage() {}

func (x *ListImageTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageTasksRequest.ProtoReflect.Descriptor instead.
func (*ListImageTasksRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{8}
}

func (x *ListImageTasksRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// 查询任务列表响应
type ListImageTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Tasks      []*TaskInfo         `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListImageTasksResponse) Reset() {
	*x = ListImageTasksResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImageTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageTasksResponse) ProtoMessage() {}

func (x *ListImageTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageTasksResponse.ProtoReflect.Descriptor instead.
func (*ListImageTasksResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{9}
}

func (x *ListImageTasksResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListImageTasksResponse) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 创建文生视频任务请求
type CreateText2VideoTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName      string         `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                 // 模型名称，可选，默认kling-v1
	Prompt         string         `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`                                                        // 正向文本提示词，必须
	NegativePrompt string         `protobuf:"bytes,3,opt,name=negative_prompt,json=negativePrompt,proto3" json:"negative_prompt,omitempty"`                  // 负向文本提示词，可选
	CfgScale       float32        `protobuf:"fixed32,4,opt,name=cfg_scale,json=cfgScale,proto3" json:"cfg_scale,omitempty"`                                  // 生成视频的自由度，可选，默认0.5
	Mode           GenerationMode `protobuf:"varint,5,opt,name=mode,proto3,enum=klingai.GenerationMode" json:"mode,omitempty"`                               // 生成模式，可选，默认std
	CameraControl  *CameraControl `protobuf:"bytes,6,opt,name=camera_control,json=cameraControl,proto3" json:"camera_control,omitempty"`                     // 摄像机控制，可选
	AspectRatio    AspectRatio    `protobuf:"varint,7,opt,name=aspect_ratio,json=aspectRatio,proto3,enum=klingai.AspectRatio" json:"aspect_ratio,omitempty"` // 画面纵横比，可选，默认16:9
	Duration       int32          `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`                                                   // 视频时长，可选，默认5
	CallbackUrl    string         `protobuf:"bytes,9,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`                           // 回调通知地址，可选
	ExternalTaskId string         `protobuf:"bytes,10,opt,name=external_task_id,json=externalTaskId,proto3" json:"external_task_id,omitempty"`               // 自定义任务ID，可选
}

func (x *CreateText2VideoTaskRequest) Reset() {
	*x = CreateText2VideoTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateText2VideoTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateText2VideoTaskRequest) ProtoMessage() {}

func (x *CreateText2VideoTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateText2VideoTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateText2VideoTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{10}
}

func (x *CreateText2VideoTaskRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateText2VideoTaskRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *CreateText2VideoTaskRequest) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *CreateText2VideoTaskRequest) GetCfgScale() float32 {
	if x != nil {
		return x.CfgScale
	}
	return 0
}

func (x *CreateText2VideoTaskRequest) GetMode() GenerationMode {
	if x != nil {
		return x.Mode
	}
	return GenerationMode_MODE_UNSPECIFIED
}

func (x *CreateText2VideoTaskRequest) GetCameraControl() *CameraControl {
	if x != nil {
		return x.CameraControl
	}
	return nil
}

func (x *CreateText2VideoTaskRequest) GetAspectRatio() AspectRatio {
	if x != nil {
		return x.AspectRatio
	}
	return AspectRatio_ASPECT_RATIO_UNSPECIFIED
}

func (x *CreateText2VideoTaskRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateText2VideoTaskRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *CreateText2VideoTaskRequest) GetExternalTaskId() string {
	if x != nil {
		return x.ExternalTaskId
	}
	return ""
}

// 摄像机配置
type CameraConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Horizontal float32 `protobuf:"fixed32,1,opt,name=horizontal,proto3" json:"horizontal,omitempty"` // 水平运镜
	Vertical   float32 `protobuf:"fixed32,2,opt,name=vertical,proto3" json:"vertical,omitempty"`     // 垂直运镜
	Pan        float32 `protobuf:"fixed32,3,opt,name=pan,proto3" json:"pan,omitempty"`               // 水平摇镜
	Tilt       float32 `protobuf:"fixed32,4,opt,name=tilt,proto3" json:"tilt,omitempty"`             // 垂直摇镜
	Roll       float32 `protobuf:"fixed32,5,opt,name=roll,proto3" json:"roll,omitempty"`             // 旋转运镜
	Zoom       float32 `protobuf:"fixed32,6,opt,name=zoom,proto3" json:"zoom,omitempty"`             // 变焦
}

func (x *CameraConfig) Reset() {
	*x = CameraConfig{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CameraConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraConfig) ProtoMessage() {}

func (x *CameraConfig) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraConfig.ProtoReflect.Descriptor instead.
func (*CameraConfig) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{11}
}

func (x *CameraConfig) GetHorizontal() float32 {
	if x != nil {
		return x.Horizontal
	}
	return 0
}

func (x *CameraConfig) GetVertical() float32 {
	if x != nil {
		return x.Vertical
	}
	return 0
}

func (x *CameraConfig) GetPan() float32 {
	if x != nil {
		return x.Pan
	}
	return 0
}

func (x *CameraConfig) GetTilt() float32 {
	if x != nil {
		return x.Tilt
	}
	return 0
}

func (x *CameraConfig) GetRoll() float32 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *CameraConfig) GetZoom() float32 {
	if x != nil {
		return x.Zoom
	}
	return 0
}

// 摄像机控制
type CameraControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CameraType    `protobuf:"varint,1,opt,name=type,proto3,enum=klingai.CameraType" json:"type,omitempty"` // 运镜类型
	Config *CameraConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                      // 摄像机配置
}

func (x *CameraControl) Reset() {
	*x = CameraControl{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CameraControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraControl) ProtoMessage() {}

func (x *CameraControl) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraControl.ProtoReflect.Descriptor instead.
func (*CameraControl) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{12}
}

func (x *CameraControl) GetType() CameraType {
	if x != nil {
		return x.Type
	}
	return CameraType_CAMERA_TYPE_UNSPECIFIED
}

func (x *CameraControl) GetConfig() *CameraConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateText2VideoTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string     `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                           // 系统生成的任务ID
	ExternalTaskId string     `protobuf:"bytes,2,opt,name=external_task_id,json=externalTaskId,proto3" json:"external_task_id,omitempty"` // 用户自定义任务ID
	Status         TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=klingai.TaskStatus" json:"status,omitempty"`                // 任务状态
}

func (x *CreateText2VideoTaskResponse) Reset() {
	*x = CreateText2VideoTaskResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateText2VideoTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateText2VideoTaskResponse) ProtoMessage() {}

func (x *CreateText2VideoTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateText2VideoTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateText2VideoTaskResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{13}
}

func (x *CreateText2VideoTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CreateText2VideoTaskResponse) GetExternalTaskId() string {
	if x != nil {
		return x.ExternalTaskId
	}
	return ""
}

func (x *CreateText2VideoTaskResponse) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

type GetText2VideoTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                           // 系统生成的任务ID
	ExternalTaskId string `protobuf:"bytes,2,opt,name=external_task_id,json=externalTaskId,proto3" json:"external_task_id,omitempty"` // 文生视频的自定义任务ID
}

func (x *GetText2VideoTaskRequest) Reset() {
	*x = GetText2VideoTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetText2VideoTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetText2VideoTaskRequest) ProtoMessage() {}

func (x *GetText2VideoTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetText2VideoTaskRequest.ProtoReflect.Descriptor instead.
func (*GetText2VideoTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{14}
}

func (x *GetText2VideoTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetText2VideoTaskRequest) GetExternalTaskId() string {
	if x != nil {
		return x.ExternalTaskId
	}
	return ""
}

type GetText2VideoTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                      // 任务ID，系统生成
	TaskStatus    TaskStatus  `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=klingai.TaskStatus" json:"task_status,omitempty"` // 任务状态
	TaskStatusMsg string      `protobuf:"bytes,3,opt,name=task_status_msg,json=taskStatusMsg,proto3" json:"task_status_msg,omitempty"`               // 任务状态信息，当任务失败时展示失败原因
	TaskInfo      *TaskInfo   `protobuf:"bytes,4,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`                                // 任务创建时的参数信息
	TaskResult    *TaskResult `protobuf:"bytes,5,opt,name=task_result,json=taskResult,proto3" json:"task_result,omitempty"`                          // 任务结果
	CreatedAt     int64       `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                            // 任务创建时间，Unix时间戳、单位ms
	UpdatedAt     int64       `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                            // 任务更新时间，Unix时间戳、单位ms
}

func (x *GetText2VideoTaskResponse) Reset() {
	*x = GetText2VideoTaskResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetText2VideoTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetText2VideoTaskResponse) ProtoMessage() {}

func (x *GetText2VideoTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetText2VideoTaskResponse.ProtoReflect.Descriptor instead.
func (*GetText2VideoTaskResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{15}
}

func (x *GetText2VideoTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetText2VideoTaskResponse) GetTaskStatus() TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *GetText2VideoTaskResponse) GetTaskStatusMsg() string {
	if x != nil {
		return x.TaskStatusMsg
	}
	return ""
}

func (x *GetText2VideoTaskResponse) GetTaskInfo() *TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (x *GetText2VideoTaskResponse) GetTaskResult() *TaskResult {
	if x != nil {
		return x.TaskResult
	}
	return nil
}

func (x *GetText2VideoTaskResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetText2VideoTaskResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 视频信息
type VideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // 生成的视频ID，全局唯一
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`           // 生成视频的URL
	Duration string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"` // 视频总时长，单位s
}

func (x *VideoInfo) Reset() {
	*x = VideoInfo{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoInfo) ProtoMessage() {}

func (x *VideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoInfo.ProtoReflect.Descriptor instead.
func (*VideoInfo) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{16}
}

func (x *VideoInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VideoInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VideoInfo) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

// 任务结果
type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Videos []*VideoInfo `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"` // 生成的视频列表
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{17}
}

func (x *TaskResult) GetVideos() []*VideoInfo {
	if x != nil {
		return x.Videos
	}
	return nil
}

type CreateTryOnTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName   string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`       // 模型名称，可选，默认kling-v1
	HumanImage  string `protobuf:"bytes,2,opt,name=human_image,json=humanImage,proto3" json:"human_image,omitempty"`    // 模特图片(Base64或URL)，必须
	ClothImage  string `protobuf:"bytes,3,opt,name=cloth_image,json=clothImage,proto3" json:"cloth_image,omitempty"`    // 服装图片(Base64或URL)，必须
	CallbackUrl string `protobuf:"bytes,4,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"` // 回调通知地址，可选
}

func (x *CreateTryOnTaskRequest) Reset() {
	*x = CreateTryOnTaskRequest{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTryOnTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTryOnTaskRequest) ProtoMessage() {}

func (x *CreateTryOnTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTryOnTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTryOnTaskRequest) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{18}
}

func (x *CreateTryOnTaskRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateTryOnTaskRequest) GetHumanImage() string {
	if x != nil {
		return x.HumanImage
	}
	return ""
}

func (x *CreateTryOnTaskRequest) GetClothImage() string {
	if x != nil {
		return x.ClothImage
	}
	return ""
}

func (x *CreateTryOnTaskRequest) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

type CreateTryOnTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfo *TaskInfo `protobuf:"bytes,1,opt,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
}

func (x *CreateTryOnTaskResponse) Reset() {
	*x = CreateTryOnTaskResponse{}
	mi := &file_third_party_klingai_klingai_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTryOnTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTryOnTaskResponse) ProtoMessage() {}

func (x *CreateTryOnTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_third_party_klingai_klingai_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTryOnTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTryOnTaskResponse) Descriptor() ([]byte, []int) {
	return file_third_party_klingai_klingai_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTryOnTaskResponse) GetTaskInfo() *TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

var File_third_party_klingai_klingai_proto protoreflect.FileDescriptor

var file_third_party_klingai_klingai_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x6b, 0x6c,
	0x69, 0x6e, 0x67, 0x61, 0x69, 0x2f, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x6c, 0x69, 0x6e,
	0x67, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a,
	0x11, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x52, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xf4,
	0x03, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x31, 0x0a, 0x0f, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x52, 0x0e, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a,
	0x0a, 0x1d, 0x00, 0x00, 0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0d, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x01, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x09, 0x28, 0x01,
	0x52, 0x01, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b, 0x6c, 0x69, 0x6e,
	0x67, 0x61, 0x69, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52,
	0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x22,
	0x49, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x73, 0x22, 0x53, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
	0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc4,
	0x13, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x31, 0x0a, 0x0f, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc4, 0x13, 0x52, 0x0e, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x2c, 0x0a, 0x09,
	0x63, 0x66, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x80, 0x3f, 0x2d, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x08, 0x63, 0x66, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6b,
	0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x25, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x30, 0x05, 0x30, 0x0a, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d,
	0x00, 0x00, 0x20, 0x41, 0x2d, 0x00, 0x00, 0x20, 0xc1, 0x52, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00,
	0x00, 0x20, 0x41, 0x2d, 0x00, 0x00, 0x20, 0xc1, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x20, 0x41, 0x2d, 0x00, 0x00, 0x20, 0xc1,
	0x52, 0x03, 0x70, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x20, 0x41, 0x2d,
	0x00, 0x00, 0x20, 0xc1, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d,
	0x00, 0x00, 0x20, 0x41, 0x2d, 0x00, 0x00, 0x20, 0xc1, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12,
	0x23, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x20, 0x41, 0x2d, 0x00, 0x00, 0x20, 0xc1, 0x52, 0x04,
	0x7a, 0x6f, 0x6f, 0x6d, 0x22, 0x67, 0x0a, 0x0d, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8e, 0x01,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb6, 0x02,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x6c, 0x69, 0x6e,
	0x67, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61,
	0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x49, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x79, 0x4f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x79, 0x4f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x40, 0x0a, 0x09, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4b, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x31, 0x10, 0x01, 0x2a, 0xc7, 0x01, 0x0a, 0x0b,
	0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x31, 0x36, 0x5f, 0x39, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x5f, 0x39, 0x5f, 0x31, 0x36, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x50, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x34, 0x5f,
	0x33, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x5f, 0x33, 0x5f, 0x34, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x50,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x33, 0x5f, 0x32, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f,
	0x32, 0x5f, 0x33, 0x10, 0x07, 0x2a, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x02, 0x2a, 0xa7, 0x01, 0x0a, 0x0a, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x10, 0x05, 0x32, 0xfb, 0x02, 0x0a, 0x16, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1f, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x71,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x1e, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x32, 0xa7, 0x02, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x6c,
	0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x6b, 0x6c,
	0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x32, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x32, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x32, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x32, 0x99, 0x01, 0x0a, 0x13,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x79, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x79, 0x4f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x79, 0x4f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x6c, 0x69, 0x6e, 0x67,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x79, 0x4f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x6b, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x2d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x2d, 0x74, 0x72, 0x79, 0x2d, 0x6f, 0x6e, 0x42, 0x1d, 0x5a, 0x1b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x6b, 0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x3b, 0x6b,
	0x6c, 0x69, 0x6e, 0x67, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_third_party_klingai_klingai_proto_rawDescOnce sync.Once
	file_third_party_klingai_klingai_proto_rawDescData = file_third_party_klingai_klingai_proto_rawDesc
)

func file_third_party_klingai_klingai_proto_rawDescGZIP() []byte {
	file_third_party_klingai_klingai_proto_rawDescOnce.Do(func() {
		file_third_party_klingai_klingai_proto_rawDescData = protoimpl.X.CompressGZIP(file_third_party_klingai_klingai_proto_rawDescData)
	})
	return file_third_party_klingai_klingai_proto_rawDescData
}

var file_third_party_klingai_klingai_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_third_party_klingai_klingai_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_third_party_klingai_klingai_proto_goTypes = []any{
	(TaskStatus)(0),                      // 0: klingai.TaskStatus
	(ModelType)(0),                       // 1: klingai.ModelType
	(AspectRatio)(0),                     // 2: klingai.AspectRatio
	(GenerationMode)(0),                  // 3: klingai.GenerationMode
	(CameraType)(0),                      // 4: klingai.CameraType
	(*TaskInfo)(nil),                     // 5: klingai.TaskInfo
	(*PaginationRequest)(nil),            // 6: klingai.PaginationRequest
	(*PaginationResponse)(nil),           // 7: klingai.PaginationResponse
	(*BaseTaskRequest)(nil),              // 8: klingai.BaseTaskRequest
	(*CreateImageTaskRequest)(nil),       // 9: klingai.CreateImageTaskRequest
	(*CreateImageTaskResponse)(nil),      // 10: klingai.CreateImageTaskResponse
	(*GetImageTaskRequest)(nil),          // 11: klingai.GetImageTaskRequest
	(*GetImageTaskResponse)(nil),         // 12: klingai.GetImageTaskResponse
	(*ListImageTasksRequest)(nil),        // 13: klingai.ListImageTasksRequest
	(*ListImageTasksResponse)(nil),       // 14: klingai.ListImageTasksResponse
	(*CreateText2VideoTaskRequest)(nil),  // 15: klingai.CreateText2VideoTaskRequest
	(*CameraConfig)(nil),                 // 16: klingai.CameraConfig
	(*CameraControl)(nil),                // 17: klingai.CameraControl
	(*CreateText2VideoTaskResponse)(nil), // 18: klingai.CreateText2VideoTaskResponse
	(*GetText2VideoTaskRequest)(nil),     // 19: klingai.GetText2VideoTaskRequest
	(*GetText2VideoTaskResponse)(nil),    // 20: klingai.GetText2VideoTaskResponse
	(*VideoInfo)(nil),                    // 21: klingai.VideoInfo
	(*TaskResult)(nil),                   // 22: klingai.TaskResult
	(*CreateTryOnTaskRequest)(nil),       // 23: klingai.CreateTryOnTaskRequest
	(*CreateTryOnTaskResponse)(nil),      // 24: klingai.CreateTryOnTaskResponse
}
var file_third_party_klingai_klingai_proto_depIdxs = []int32{
	0,  // 0: klingai.TaskInfo.status:type_name -> klingai.TaskStatus
	2,  // 1: klingai.CreateImageTaskRequest.aspect_ratio:type_name -> klingai.AspectRatio
	5,  // 2: klingai.CreateImageTaskResponse.task_info:type_name -> klingai.TaskInfo
	5,  // 3: klingai.GetImageTaskResponse.task_info:type_name -> klingai.TaskInfo
	6,  // 4: klingai.ListImageTasksRequest.pagination:type_name -> klingai.PaginationRequest
	7,  // 5: klingai.ListImageTasksResponse.pagination:type_name -> klingai.PaginationResponse
	5,  // 6: klingai.ListImageTasksResponse.tasks:type_name -> klingai.TaskInfo
	3,  // 7: klingai.CreateText2VideoTaskRequest.mode:type_name -> klingai.GenerationMode
	17, // 8: klingai.CreateText2VideoTaskRequest.camera_control:type_name -> klingai.CameraControl
	2,  // 9: klingai.CreateText2VideoTaskRequest.aspect_ratio:type_name -> klingai.AspectRatio
	4,  // 10: klingai.CameraControl.type:type_name -> klingai.CameraType
	16, // 11: klingai.CameraControl.config:type_name -> klingai.CameraConfig
	0,  // 12: klingai.CreateText2VideoTaskResponse.status:type_name -> klingai.TaskStatus
	0,  // 13: klingai.GetText2VideoTaskResponse.task_status:type_name -> klingai.TaskStatus
	5,  // 14: klingai.GetText2VideoTaskResponse.task_info:type_name -> klingai.TaskInfo
	22, // 15: klingai.GetText2VideoTaskResponse.task_result:type_name -> klingai.TaskResult
	21, // 16: klingai.TaskResult.videos:type_name -> klingai.VideoInfo
	5,  // 17: klingai.CreateTryOnTaskResponse.task_info:type_name -> klingai.TaskInfo
	9,  // 18: klingai.ImageGenerationService.CreateImageTask:input_type -> klingai.CreateImageTaskRequest
	11, // 19: klingai.ImageGenerationService.GetImageTask:input_type -> klingai.GetImageTaskRequest
	13, // 20: klingai.ImageGenerationService.ListImageTasks:input_type -> klingai.ListImageTasksRequest
	15, // 21: klingai.VideoGenerationService.CreateText2VideoTask:input_type -> klingai.CreateText2VideoTaskRequest
	19, // 22: klingai.VideoGenerationService.GetText2VideoTask:input_type -> klingai.GetText2VideoTaskRequest
	23, // 23: klingai.VirtualTryOnService.CreateTryOnTask:input_type -> klingai.CreateTryOnTaskRequest
	10, // 24: klingai.ImageGenerationService.CreateImageTask:output_type -> klingai.CreateImageTaskResponse
	12, // 25: klingai.ImageGenerationService.GetImageTask:output_type -> klingai.GetImageTaskResponse
	14, // 26: klingai.ImageGenerationService.ListImageTasks:output_type -> klingai.ListImageTasksResponse
	18, // 27: klingai.VideoGenerationService.CreateText2VideoTask:output_type -> klingai.CreateText2VideoTaskResponse
	20, // 28: klingai.VideoGenerationService.GetText2VideoTask:output_type -> klingai.GetText2VideoTaskResponse
	24, // 29: klingai.VirtualTryOnService.CreateTryOnTask:output_type -> klingai.CreateTryOnTaskResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_third_party_klingai_klingai_proto_init() }
func file_third_party_klingai_klingai_proto_init() {
	if File_third_party_klingai_klingai_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_third_party_klingai_klingai_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_third_party_klingai_klingai_proto_goTypes,
		DependencyIndexes: file_third_party_klingai_klingai_proto_depIdxs,
		EnumInfos:         file_third_party_klingai_klingai_proto_enumTypes,
		MessageInfos:      file_third_party_klingai_klingai_proto_msgTypes,
	}.Build()
	File_third_party_klingai_klingai_proto = out.File
	file_third_party_klingai_klingai_proto_rawDesc = nil
	file_third_party_klingai_klingai_proto_goTypes = nil
	file_third_party_klingai_klingai_proto_depIdxs = nil
}
