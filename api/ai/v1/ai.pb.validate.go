// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ai/v1/ai.proto

package aiv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatRequestMultiError, or
// nil if none found.
func (m *ChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConversationId() <= 0 {
		err := ChatRequestValidationError{
			field:  "ConversationId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 4096 {
		err := ChatRequestValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Model

	// no validation rules for SystemPrompt

	// no validation rules for GenerateImage

	if all {
		switch v := interface{}(m.GetImageParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatRequestValidationError{
					field:  "ImageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatRequestValidationError{
					field:  "ImageParams",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatRequestValidationError{
				field:  "ImageParams",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatRequestMultiError(errors)
	}

	return nil
}

// ChatRequestMultiError is an error wrapping multiple validation errors
// returned by ChatRequest.ValidateAll() if the designated constraints aren't met.
type ChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRequestMultiError) AllErrors() []error { return m }

// ChatRequestValidationError is the validation error returned by
// ChatRequest.Validate if the designated constraints aren't met.
type ChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRequestValidationError) ErrorName() string { return "ChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRequestValidationError{}

// Validate checks the field values on ChatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatResponseMultiError, or
// nil if none found.
func (m *ChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tokens

	for idx, item := range m.GetGeneratedImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  fmt.Sprintf("GeneratedImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatResponseValidationError{
						field:  fmt.Sprintf("GeneratedImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatResponseValidationError{
					field:  fmt.Sprintf("GeneratedImages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatResponseMultiError(errors)
	}

	return nil
}

// ChatResponseMultiError is an error wrapping multiple validation errors
// returned by ChatResponse.ValidateAll() if the designated constraints aren't met.
type ChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatResponseMultiError) AllErrors() []error { return m }

// ChatResponseValidationError is the validation error returned by
// ChatResponse.Validate if the designated constraints aren't met.
type ChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatResponseValidationError) ErrorName() string { return "ChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatResponseValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Role

	// no validation rules for Content

	// no validation rules for Tokens

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on CreateConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConversationRequestMultiError, or nil if none found.
func (m *CreateConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 255 {
		err := CreateConversationRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModel()) < 1 {
		err := CreateConversationRequestValidationError{
			field:  "Model",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SystemPrompt

	if len(errors) > 0 {
		return CreateConversationRequestMultiError(errors)
	}

	return nil
}

// CreateConversationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConversationRequestMultiError) AllErrors() []error { return m }

// CreateConversationRequestValidationError is the validation error returned by
// CreateConversationRequest.Validate if the designated constraints aren't met.
type CreateConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConversationRequestValidationError) ErrorName() string {
	return "CreateConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConversationRequestValidationError{}

// Validate checks the field values on CreateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConversationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConversationResponseMultiError, or nil if none found.
func (m *CreateConversationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConversationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateConversationResponseMultiError(errors)
	}

	return nil
}

// CreateConversationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateConversationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateConversationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConversationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConversationResponseMultiError) AllErrors() []error { return m }

// CreateConversationResponseValidationError is the validation error returned
// by CreateConversationResponse.Validate if the designated constraints aren't met.
type CreateConversationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConversationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConversationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConversationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConversationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConversationResponseValidationError) ErrorName() string {
	return "CreateConversationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConversationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConversationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConversationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConversationResponseValidationError{}

// Validate checks the field values on ListConversationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConversationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConversationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConversationsRequestMultiError, or nil if none found.
func (m *ListConversationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConversationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for Page

	if len(errors) > 0 {
		return ListConversationsRequestMultiError(errors)
	}

	return nil
}

// ListConversationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConversationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConversationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConversationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConversationsRequestMultiError) AllErrors() []error { return m }

// ListConversationsRequestValidationError is the validation error returned by
// ListConversationsRequest.Validate if the designated constraints aren't met.
type ListConversationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsRequestValidationError) ErrorName() string {
	return "ListConversationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsRequestValidationError{}

// Validate checks the field values on ListConversationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConversationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConversationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConversationsResponseMultiError, or nil if none found.
func (m *ListConversationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConversationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConversationsResponseValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConversationsResponseValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConversationsResponseValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListConversationsResponseMultiError(errors)
	}

	return nil
}

// ListConversationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConversationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListConversationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConversationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConversationsResponseMultiError) AllErrors() []error { return m }

// ListConversationsResponseValidationError is the validation error returned by
// ListConversationsResponse.Validate if the designated constraints aren't met.
type ListConversationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsResponseValidationError) ErrorName() string {
	return "ListConversationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsResponseValidationError{}

// Validate checks the field values on Conversation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conversation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conversation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConversationMultiError, or
// nil if none found.
func (m *Conversation) ValidateAll() error {
	return m.validate(true)
}

func (m *Conversation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Model

	// no validation rules for SystemPrompt

	// no validation rules for TotalTokens

	// no validation rules for Status

	// no validation rules for LastMessageAt

	// no validation rules for CreatedAt

	if all {
		switch v := interface{}(m.GetLastMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "LastMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationValidationError{
				field:  "LastMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConversationMultiError(errors)
	}

	return nil
}

// ConversationMultiError is an error wrapping multiple validation errors
// returned by Conversation.ValidateAll() if the designated constraints aren't met.
type ConversationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationMultiError) AllErrors() []error { return m }

// ConversationValidationError is the validation error returned by
// Conversation.Validate if the designated constraints aren't met.
type ConversationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationValidationError) ErrorName() string { return "ConversationValidationError" }

// Error satisfies the builtin error interface
func (e ConversationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationValidationError{}

// Validate checks the field values on GetConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationRequestMultiError, or nil if none found.
func (m *GetConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetConversationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConversationRequestMultiError(errors)
	}

	return nil
}

// GetConversationRequestMultiError is an error wrapping multiple validation
// errors returned by GetConversationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationRequestMultiError) AllErrors() []error { return m }

// GetConversationRequestValidationError is the validation error returned by
// GetConversationRequest.Validate if the designated constraints aren't met.
type GetConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationRequestValidationError) ErrorName() string {
	return "GetConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationRequestValidationError{}

// Validate checks the field values on GetConversationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConversationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConversationResponseMultiError, or nil if none found.
func (m *GetConversationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConversationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConversationResponseValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConversationResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConversationResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConversationResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConversationResponseMultiError(errors)
	}

	return nil
}

// GetConversationResponseMultiError is an error wrapping multiple validation
// errors returned by GetConversationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConversationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConversationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConversationResponseMultiError) AllErrors() []error { return m }

// GetConversationResponseValidationError is the validation error returned by
// GetConversationResponse.Validate if the designated constraints aren't met.
type GetConversationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConversationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConversationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConversationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConversationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConversationResponseValidationError) ErrorName() string {
	return "GetConversationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConversationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConversationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConversationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConversationResponseValidationError{}

// Validate checks the field values on DeleteConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConversationRequestMultiError, or nil if none found.
func (m *DeleteConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteConversationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteConversationRequestMultiError(errors)
	}

	return nil
}

// DeleteConversationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConversationRequestMultiError) AllErrors() []error { return m }

// DeleteConversationRequestValidationError is the validation error returned by
// DeleteConversationRequest.Validate if the designated constraints aren't met.
type DeleteConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConversationRequestValidationError) ErrorName() string {
	return "DeleteConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConversationRequestValidationError{}

// Validate checks the field values on UpdateConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConversationRequestMultiError, or nil if none found.
func (m *UpdateConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateConversationRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for SystemPrompt

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateConversationRequestMultiError(errors)
	}

	return nil
}

// UpdateConversationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConversationRequestMultiError) AllErrors() []error { return m }

// UpdateConversationRequestValidationError is the validation error returned by
// UpdateConversationRequest.Validate if the designated constraints aren't met.
type UpdateConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationRequestValidationError) ErrorName() string {
	return "UpdateConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationRequestValidationError{}

// Validate checks the field values on GenerateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateImageRequestMultiError, or nil if none found.
func (m *GenerateImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPrompt()); l < 1 || l > 4000 {
		err := GenerateImageRequestValidationError{
			field:  "Prompt",
			reason: "value length must be between 1 and 4000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetN(); val < 1 || val > 10 {
		err := GenerateImageRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GenerateImageRequest_Size_InLookup[m.GetSize()]; !ok {
		err := GenerateImageRequestValidationError{
			field:  "Size",
			reason: "value must be in list [256x256 512x512 1024x1024]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GenerateImageRequest_Quality_InLookup[m.GetQuality()]; !ok {
		err := GenerateImageRequestValidationError{
			field:  "Quality",
			reason: "value must be in list [standard hd]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GenerateImageRequest_Style_InLookup[m.GetStyle()]; !ok {
		err := GenerateImageRequestValidationError{
			field:  "Style",
			reason: "value must be in list [vivid natural]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GenerateImageRequest_Model_InLookup[m.GetModel()]; !ok {
		err := GenerateImageRequestValidationError{
			field:  "Model",
			reason: "value must be in list [dall-e-2 dall-e-3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateImageRequestMultiError(errors)
	}

	return nil
}

// GenerateImageRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateImageRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateImageRequestMultiError) AllErrors() []error { return m }

// GenerateImageRequestValidationError is the validation error returned by
// GenerateImageRequest.Validate if the designated constraints aren't met.
type GenerateImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateImageRequestValidationError) ErrorName() string {
	return "GenerateImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateImageRequestValidationError{}

var _GenerateImageRequest_Size_InLookup = map[string]struct{}{
	"256x256":   {},
	"512x512":   {},
	"1024x1024": {},
}

var _GenerateImageRequest_Quality_InLookup = map[string]struct{}{
	"standard": {},
	"hd":       {},
}

var _GenerateImageRequest_Style_InLookup = map[string]struct{}{
	"vivid":   {},
	"natural": {},
}

var _GenerateImageRequest_Model_InLookup = map[string]struct{}{
	"dall-e-2": {},
	"dall-e-3": {},
}

// Validate checks the field values on EditImageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditImageRequestMultiError, or nil if none found.
func (m *EditImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetImage()) < 1 {
		err := EditImageRequestValidationError{
			field:  "Image",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPrompt()); l < 1 || l > 4000 {
		err := EditImageRequestValidationError{
			field:  "Prompt",
			reason: "value length must be between 1 and 4000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Mask

	if val := m.GetN(); val < 1 || val > 10 {
		err := EditImageRequestValidationError{
			field:  "N",
			reason: "value must be inside range [1, 10]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _EditImageRequest_Size_InLookup[m.GetSize()]; !ok {
		err := EditImageRequestValidationError{
			field:  "Size",
			reason: "value must be in list [256x256 512x512 1024x1024]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EditImageRequestMultiError(errors)
	}

	return nil
}

// EditImageRequestMultiError is an error wrapping multiple validation errors
// returned by EditImageRequest.ValidateAll() if the designated constraints
// aren't met.
type EditImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditImageRequestMultiError) AllErrors() []error { return m }

// EditImageRequestValidationError is the validation error returned by
// EditImageRequest.Validate if the designated constraints aren't met.
type EditImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditImageRequestValidationError) ErrorName() string { return "EditImageRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditImageRequestValidationError{}

var _EditImageRequest_Size_InLookup = map[string]struct{}{
	"256x256":   {},
	"512x512":   {},
	"1024x1024": {},
}

// Validate checks the field values on GenerateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateImageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateImageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateImageResponseMultiError, or nil if none found.
func (m *GenerateImageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateImageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Created

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateImageResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateImageResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateImageResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenerateImageResponseMultiError(errors)
	}

	return nil
}

// GenerateImageResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateImageResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateImageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateImageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateImageResponseMultiError) AllErrors() []error { return m }

// GenerateImageResponseValidationError is the validation error returned by
// GenerateImageResponse.Validate if the designated constraints aren't met.
type GenerateImageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateImageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateImageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateImageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateImageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateImageResponseValidationError) ErrorName() string {
	return "GenerateImageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateImageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateImageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateImageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateImageResponseValidationError{}

// Validate checks the field values on ImageData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageDataMultiError, or nil
// if none found.
func (m *ImageData) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for RevisedPrompt

	if len(errors) > 0 {
		return ImageDataMultiError(errors)
	}

	return nil
}

// ImageDataMultiError is an error wrapping multiple validation errors returned
// by ImageData.ValidateAll() if the designated constraints aren't met.
type ImageDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageDataMultiError) AllErrors() []error { return m }

// ImageDataValidationError is the validation error returned by
// ImageData.Validate if the designated constraints aren't met.
type ImageDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageDataValidationError) ErrorName() string { return "ImageDataValidationError" }

// Error satisfies the builtin error interface
func (e ImageDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageDataValidationError{}

// Validate checks the field values on ListGeneratedImagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneratedImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneratedImagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneratedImagesRequestMultiError, or nil if none found.
func (m *ListGeneratedImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneratedImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for Page

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ListGeneratedImagesRequestMultiError(errors)
	}

	return nil
}

// ListGeneratedImagesRequestMultiError is an error wrapping multiple
// validation errors returned by ListGeneratedImagesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGeneratedImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneratedImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneratedImagesRequestMultiError) AllErrors() []error { return m }

// ListGeneratedImagesRequestValidationError is the validation error returned
// by ListGeneratedImagesRequest.Validate if the designated constraints aren't met.
type ListGeneratedImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneratedImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneratedImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneratedImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneratedImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneratedImagesRequestValidationError) ErrorName() string {
	return "ListGeneratedImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneratedImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneratedImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneratedImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneratedImagesRequestValidationError{}

// Validate checks the field values on ListGeneratedImagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGeneratedImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGeneratedImagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGeneratedImagesResponseMultiError, or nil if none found.
func (m *ListGeneratedImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGeneratedImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGeneratedImagesResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGeneratedImagesResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGeneratedImagesResponseValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListGeneratedImagesResponseMultiError(errors)
	}

	return nil
}

// ListGeneratedImagesResponseMultiError is an error wrapping multiple
// validation errors returned by ListGeneratedImagesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGeneratedImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGeneratedImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGeneratedImagesResponseMultiError) AllErrors() []error { return m }

// ListGeneratedImagesResponseValidationError is the validation error returned
// by ListGeneratedImagesResponse.Validate if the designated constraints
// aren't met.
type ListGeneratedImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGeneratedImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGeneratedImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGeneratedImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGeneratedImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGeneratedImagesResponseValidationError) ErrorName() string {
	return "ListGeneratedImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGeneratedImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGeneratedImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGeneratedImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGeneratedImagesResponseValidationError{}

// Validate checks the field values on GeneratedImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GeneratedImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GeneratedImage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GeneratedImageMultiError,
// or nil if none found.
func (m *GeneratedImage) ValidateAll() error {
	return m.validate(true)
}

func (m *GeneratedImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Prompt

	// no validation rules for Url

	// no validation rules for Size

	// no validation rules for Model

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GeneratedImageMultiError(errors)
	}

	return nil
}

// GeneratedImageMultiError is an error wrapping multiple validation errors
// returned by GeneratedImage.ValidateAll() if the designated constraints
// aren't met.
type GeneratedImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GeneratedImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GeneratedImageMultiError) AllErrors() []error { return m }

// GeneratedImageValidationError is the validation error returned by
// GeneratedImage.Validate if the designated constraints aren't met.
type GeneratedImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GeneratedImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GeneratedImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GeneratedImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GeneratedImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GeneratedImageValidationError) ErrorName() string { return "GeneratedImageValidationError" }

// Error satisfies the builtin error interface
func (e GeneratedImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneratedImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GeneratedImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GeneratedImageValidationError{}

// Validate checks the field values on ImageGenerationParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImageGenerationParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageGenerationParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImageGenerationParamsMultiError, or nil if none found.
func (m *ImageGenerationParams) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageGenerationParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _ImageGenerationParams_Size_InLookup[m.GetSize()]; !ok {
		err := ImageGenerationParamsValidationError{
			field:  "Size",
			reason: "value must be in list [256x256 512x512 1024x1024]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ImageGenerationParams_Quality_InLookup[m.GetQuality()]; !ok {
		err := ImageGenerationParamsValidationError{
			field:  "Quality",
			reason: "value must be in list [standard hd]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ImageGenerationParams_Style_InLookup[m.GetStyle()]; !ok {
		err := ImageGenerationParamsValidationError{
			field:  "Style",
			reason: "value must be in list [vivid natural]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetN(); val < 1 || val > 4 {
		err := ImageGenerationParamsValidationError{
			field:  "N",
			reason: "value must be inside range [1, 4]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImageGenerationParamsMultiError(errors)
	}

	return nil
}

// ImageGenerationParamsMultiError is an error wrapping multiple validation
// errors returned by ImageGenerationParams.ValidateAll() if the designated
// constraints aren't met.
type ImageGenerationParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageGenerationParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageGenerationParamsMultiError) AllErrors() []error { return m }

// ImageGenerationParamsValidationError is the validation error returned by
// ImageGenerationParams.Validate if the designated constraints aren't met.
type ImageGenerationParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageGenerationParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageGenerationParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageGenerationParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageGenerationParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageGenerationParamsValidationError) ErrorName() string {
	return "ImageGenerationParamsValidationError"
}

// Error satisfies the builtin error interface
func (e ImageGenerationParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageGenerationParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageGenerationParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageGenerationParamsValidationError{}

var _ImageGenerationParams_Size_InLookup = map[string]struct{}{
	"256x256":   {},
	"512x512":   {},
	"1024x1024": {},
}

var _ImageGenerationParams_Quality_InLookup = map[string]struct{}{
	"standard": {},
	"hd":       {},
}

var _ImageGenerationParams_Style_InLookup = map[string]struct{}{
	"vivid":   {},
	"natural": {},
}
