// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/ai/v1/ai.proto

package aiv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAIChat = "/api.ai.AI/Chat"
const OperationAICreateConversation = "/api.ai.AI/CreateConversation"
const OperationAIDeleteConversation = "/api.ai.AI/DeleteConversation"
const OperationAIEditImage = "/api.ai.AI/EditImage"
const OperationAIGenerateImage = "/api.ai.AI/GenerateImage"
const OperationAIGetConversation = "/api.ai.AI/GetConversation"
const OperationAIListConversations = "/api.ai.AI/ListConversations"
const OperationAIListGeneratedImages = "/api.ai.AI/ListGeneratedImages"
const OperationAIUpdateConversation = "/api.ai.AI/UpdateConversation"

type AIHTTPServer interface {
	// Chat Chat 与AI助手对话
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// CreateConversation CreateConversation 创建新的对话
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// DeleteConversation DeleteConversation 删除对话
	DeleteConversation(context.Context, *DeleteConversationRequest) (*emptypb.Empty, error)
	// EditImage EditImage 编辑/变体图片
	EditImage(context.Context, *EditImageRequest) (*GenerateImageResponse, error)
	// GenerateImage GenerateImage 生成图片
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	// GetConversation GetConversation 获取对话详情
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// ListConversations ListConversations 获取对话列表
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// ListGeneratedImages ListGeneratedImages 获取生成的图片列表
	ListGeneratedImages(context.Context, *ListGeneratedImagesRequest) (*ListGeneratedImagesResponse, error)
	// UpdateConversation UpdateConversation 更新对话信息
	UpdateConversation(context.Context, *UpdateConversationRequest) (*emptypb.Empty, error)
}

func RegisterAIHTTPServer(s *http.Server, srv AIHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ai/chat", _AI_Chat0_HTTP_Handler(srv))
	r.POST("/v1/ai/conversations", _AI_CreateConversation0_HTTP_Handler(srv))
	r.GET("/v1/ai/conversations", _AI_ListConversations0_HTTP_Handler(srv))
	r.GET("/v1/ai/conversations/{id}", _AI_GetConversation0_HTTP_Handler(srv))
	r.DELETE("/v1/ai/conversations/{id}", _AI_DeleteConversation0_HTTP_Handler(srv))
	r.PATCH("/v1/ai/conversations/{id}", _AI_UpdateConversation0_HTTP_Handler(srv))
	r.POST("/v1/ai/images/generations", _AI_GenerateImage0_HTTP_Handler(srv))
	r.POST("/v1/ai/images/edits", _AI_EditImage0_HTTP_Handler(srv))
	r.GET("/v1/ai/images", _AI_ListGeneratedImages0_HTTP_Handler(srv))
}

func _AI_Chat0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Chat(ctx, req.(*ChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_CreateConversation0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAICreateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConversation(ctx, req.(*CreateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConversationResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_ListConversations0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConversationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIListConversations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConversations(ctx, req.(*ListConversationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListConversationsResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_GetConversation0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIGetConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversation(ctx, req.(*GetConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConversationResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_DeleteConversation0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIDeleteConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConversation(ctx, req.(*DeleteConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AI_UpdateConversation0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIUpdateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConversation(ctx, req.(*UpdateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AI_GenerateImage0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIGenerateImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateImage(ctx, req.(*GenerateImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateImageResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_EditImage0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIEditImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditImage(ctx, req.(*EditImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateImageResponse)
		return ctx.Result(200, reply)
	}
}

func _AI_ListGeneratedImages0_HTTP_Handler(srv AIHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGeneratedImagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIListGeneratedImages)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGeneratedImages(ctx, req.(*ListGeneratedImagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGeneratedImagesResponse)
		return ctx.Result(200, reply)
	}
}

type AIHTTPClient interface {
	Chat(ctx context.Context, req *ChatRequest, opts ...http.CallOption) (rsp *ChatResponse, err error)
	CreateConversation(ctx context.Context, req *CreateConversationRequest, opts ...http.CallOption) (rsp *CreateConversationResponse, err error)
	DeleteConversation(ctx context.Context, req *DeleteConversationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EditImage(ctx context.Context, req *EditImageRequest, opts ...http.CallOption) (rsp *GenerateImageResponse, err error)
	GenerateImage(ctx context.Context, req *GenerateImageRequest, opts ...http.CallOption) (rsp *GenerateImageResponse, err error)
	GetConversation(ctx context.Context, req *GetConversationRequest, opts ...http.CallOption) (rsp *GetConversationResponse, err error)
	ListConversations(ctx context.Context, req *ListConversationsRequest, opts ...http.CallOption) (rsp *ListConversationsResponse, err error)
	ListGeneratedImages(ctx context.Context, req *ListGeneratedImagesRequest, opts ...http.CallOption) (rsp *ListGeneratedImagesResponse, err error)
	UpdateConversation(ctx context.Context, req *UpdateConversationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AIHTTPClientImpl struct {
	cc *http.Client
}

func NewAIHTTPClient(client *http.Client) AIHTTPClient {
	return &AIHTTPClientImpl{client}
}

func (c *AIHTTPClientImpl) Chat(ctx context.Context, in *ChatRequest, opts ...http.CallOption) (*ChatResponse, error) {
	var out ChatResponse
	pattern := "/v1/ai/chat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...http.CallOption) (*CreateConversationResponse, error) {
	var out CreateConversationResponse
	pattern := "/v1/ai/conversations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAICreateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIDeleteConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) EditImage(ctx context.Context, in *EditImageRequest, opts ...http.CallOption) (*GenerateImageResponse, error) {
	var out GenerateImageResponse
	pattern := "/v1/ai/images/edits"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIEditImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...http.CallOption) (*GenerateImageResponse, error) {
	var out GenerateImageResponse
	pattern := "/v1/ai/images/generations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIGenerateImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...http.CallOption) (*GetConversationResponse, error) {
	var out GetConversationResponse
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIGetConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...http.CallOption) (*ListConversationsResponse, error) {
	var out ListConversationsResponse
	pattern := "/v1/ai/conversations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIListConversations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) ListGeneratedImages(ctx context.Context, in *ListGeneratedImagesRequest, opts ...http.CallOption) (*ListGeneratedImagesResponse, error) {
	var out ListGeneratedImagesResponse
	pattern := "/v1/ai/images"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIListGeneratedImages))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIHTTPClientImpl) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIUpdateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
