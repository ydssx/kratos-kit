// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             (unknown)
// source: api/ai/v1/ai.proto

package aiv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAIServiceCreateConversation = "/api.ai.AIService/CreateConversation"
const OperationAIServiceDeleteConversation = "/api.ai.AIService/DeleteConversation"
const OperationAIServiceEditImage = "/api.ai.AIService/EditImage"
const OperationAIServiceGenerateImage = "/api.ai.AIService/GenerateImage"
const OperationAIServiceGetConversation = "/api.ai.AIService/GetConversation"
const OperationAIServiceListConversations = "/api.ai.AIService/ListConversations"
const OperationAIServiceListGeneratedImages = "/api.ai.AIService/ListGeneratedImages"
const OperationAIServiceUpdateConversation = "/api.ai.AIService/UpdateConversation"

type AIServiceHTTPServer interface {
	// CreateConversation CreateConversation 创建新的对话
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// DeleteConversation DeleteConversation 删除对话
	DeleteConversation(context.Context, *DeleteConversationRequest) (*emptypb.Empty, error)
	// EditImage EditImage 编辑/变体图片
	EditImage(context.Context, *EditImageRequest) (*GenerateImageResponse, error)
	// GenerateImage GenerateImage 生成图片
	GenerateImage(context.Context, *GenerateImageRequest) (*GenerateImageResponse, error)
	// GetConversation GetConversation 获取对话详情
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// ListConversations ListConversations 获取对话列表
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// ListGeneratedImages ListGeneratedImages 获取生成的图片列表
	ListGeneratedImages(context.Context, *ListGeneratedImagesRequest) (*ListGeneratedImagesResponse, error)
	// UpdateConversation UpdateConversation 更新对话信息
	UpdateConversation(context.Context, *UpdateConversationRequest) (*emptypb.Empty, error)
}

func RegisterAIServiceHTTPServer(s *http.Server, srv AIServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/ai/conversations", _AIService_CreateConversation0_HTTP_Handler(srv))
	r.GET("/api/v1/ai/conversations", _AIService_ListConversations0_HTTP_Handler(srv))
	r.GET("/v1/ai/conversations/{id}", _AIService_GetConversation0_HTTP_Handler(srv))
	r.DELETE("/v1/ai/conversations/{id}", _AIService_DeleteConversation0_HTTP_Handler(srv))
	r.PATCH("/v1/ai/conversations/{id}", _AIService_UpdateConversation0_HTTP_Handler(srv))
	r.POST("/v1/ai/images/generations", _AIService_GenerateImage0_HTTP_Handler(srv))
	r.POST("/v1/ai/images/edits", _AIService_EditImage0_HTTP_Handler(srv))
	r.GET("/v1/ai/images", _AIService_ListGeneratedImages0_HTTP_Handler(srv))
}

func _AIService_CreateConversation0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceCreateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConversation(ctx, req.(*CreateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConversationResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_ListConversations0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConversationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceListConversations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConversations(ctx, req.(*ListConversationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListConversationsResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_GetConversation0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceGetConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversation(ctx, req.(*GetConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConversationResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_DeleteConversation0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceDeleteConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConversation(ctx, req.(*DeleteConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AIService_UpdateConversation0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceUpdateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConversation(ctx, req.(*UpdateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AIService_GenerateImage0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceGenerateImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateImage(ctx, req.(*GenerateImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateImageResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_EditImage0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EditImageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceEditImage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EditImage(ctx, req.(*EditImageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateImageResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_ListGeneratedImages0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGeneratedImagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceListGeneratedImages)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGeneratedImages(ctx, req.(*ListGeneratedImagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGeneratedImagesResponse)
		return ctx.Result(200, reply)
	}
}

type AIServiceHTTPClient interface {
	CreateConversation(ctx context.Context, req *CreateConversationRequest, opts ...http.CallOption) (rsp *CreateConversationResponse, err error)
	DeleteConversation(ctx context.Context, req *DeleteConversationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	EditImage(ctx context.Context, req *EditImageRequest, opts ...http.CallOption) (rsp *GenerateImageResponse, err error)
	GenerateImage(ctx context.Context, req *GenerateImageRequest, opts ...http.CallOption) (rsp *GenerateImageResponse, err error)
	GetConversation(ctx context.Context, req *GetConversationRequest, opts ...http.CallOption) (rsp *GetConversationResponse, err error)
	ListConversations(ctx context.Context, req *ListConversationsRequest, opts ...http.CallOption) (rsp *ListConversationsResponse, err error)
	ListGeneratedImages(ctx context.Context, req *ListGeneratedImagesRequest, opts ...http.CallOption) (rsp *ListGeneratedImagesResponse, err error)
	UpdateConversation(ctx context.Context, req *UpdateConversationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AIServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAIServiceHTTPClient(client *http.Client) AIServiceHTTPClient {
	return &AIServiceHTTPClientImpl{client}
}

func (c *AIServiceHTTPClientImpl) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...http.CallOption) (*CreateConversationResponse, error) {
	var out CreateConversationResponse
	pattern := "/api/v1/ai/conversations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceCreateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIServiceDeleteConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) EditImage(ctx context.Context, in *EditImageRequest, opts ...http.CallOption) (*GenerateImageResponse, error) {
	var out GenerateImageResponse
	pattern := "/v1/ai/images/edits"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceEditImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) GenerateImage(ctx context.Context, in *GenerateImageRequest, opts ...http.CallOption) (*GenerateImageResponse, error) {
	var out GenerateImageResponse
	pattern := "/v1/ai/images/generations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceGenerateImage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...http.CallOption) (*GetConversationResponse, error) {
	var out GetConversationResponse
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIServiceGetConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...http.CallOption) (*ListConversationsResponse, error) {
	var out ListConversationsResponse
	pattern := "/api/v1/ai/conversations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIServiceListConversations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) ListGeneratedImages(ctx context.Context, in *ListGeneratedImagesRequest, opts ...http.CallOption) (*ListGeneratedImagesResponse, error) {
	var out ListGeneratedImagesResponse
	pattern := "/v1/ai/images"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIServiceListGeneratedImages))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/ai/conversations/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceUpdateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
